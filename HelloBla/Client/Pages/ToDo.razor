@page "/todo"
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using HelloBla.Client.Model

<PageTitle>Todo</PageTitle>

<h1>Todo  (not done: @todos.Count(todo => !todo.IsDone))</h1>

<ul>
    @foreach (var todo in todos) {
            <li>
            <InputCheckbox @bind-Value="todo.IsDone"
                           @bind-Value:after="(e) => onToDoChanged(todo)" />
            <input @bind="todo.Title" />
        </li>
    }
</ul>

<input placeholder="Something todo" @bind="newTodo" />
<button @onclick="AddTodo">Add todo</button>
<button @onclick="UpdateLocalStorage">Save</button>
<button @onclick="ClearLocalStorage">Clear</button>


@code {
    private string? newTodo;

    private List<TodoItem> todos = new List<TodoItem>();

    private const string todoKey = "todo";

    protected override async Task OnInitializedAsync()
    {

        var x = await localStore.GetItemAsync<List<TodoItem>>(todoKey);
        if (x != null)
            todos = x;
    }

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo });
            newTodo = string.Empty;
        }
    }

    public async void UpdateLocalStorage()
    {
        Console.WriteLine("UpdateLocalStorage");
        await localStore.SetItemAsync(todoKey, todos);
    }

    public async void ClearLocalStorage()
    {
        todos.Clear();
        await localStore.RemoveItemAsync(todoKey);
        await localStore.ClearAsync();
    }

    public void onToDoChanged(TodoItem todo) {
        Console.WriteLine("onToDoChanged " + todo.Title);

    }

   
}

